import{_ as t,o as r,c as a,Q as d}from"./chunks/framework.27045dd1.js";const m=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"note/frame/JavaScript.md","filePath":"note/frame/JavaScript.md"}'),e={name:"note/frame/JavaScript.md"},i=d('<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1><h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;">​</a></h2><h3 id="_1-什么是-javascript" tabindex="-1">1. 什么是 JavaScript <a class="header-anchor" href="#_1-什么是-javascript" aria-label="Permalink to &quot;1. 什么是 JavaScript&quot;">​</a></h3><p>JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发 Web 页面的脚本语言而出名，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式、声明式、函数式编程范式。</p><p><em><code>注：</code> MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Language_Overview" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Language_Overview</a></em></p><h3 id="_2-语言特点" tabindex="-1">2. 语言特点 <a class="header-anchor" href="#_2-语言特点" aria-label="Permalink to &quot;2. 语言特点&quot;">​</a></h3><ul><li>脚本语言。JavaScript 是一种解释型的脚本语言，C、C++ 等语言先编译后执行，而 JavaScript 是在程序的运行过程中逐行进行解释。</li><li>基于对象。JavaScript 是一种基于对象的脚本语言，它不仅可以创建对象，也能使用现有的对象。</li><li>简单。JavaScript 语言中采用的是弱类型的变量类型，对使用的数据类型未做出严格的要求，是基于 Java 基本语句和控制的脚本语言，其设计简单紧凑。</li><li>动态性。JavaScript 是一种采用事件驱动的脚本语言，它不需要经过Web服务器就可以对用户的输入做出响应。在访问一个网页时，鼠标在网页中进行鼠标点击或上下移、窗口移动等操作 JavaScript 都可直接对这些事件给出相应的响应。</li><li>跨平台性。JavaScript 脚本语言不依赖于操作系统，仅需要浏览器的支持。因此一个 JavaScript 脚本在编写后可以带到任意机器上使用，前提是机器上的浏览器支 持 JavaScript 脚本语言，JavaScript 已被大多数的浏览器所支持。不同于服务器端脚本语言，例如 PHP 与 ASP，JavaScript 主要被作为客户端脚本语言在用户的浏览器上运行，不需要服务器的支持。所以在早期程序员比较倾向于使用 JavaScript 以减少对服务器的负担，而与此同时也带来另一个问题，安全性。</li></ul><h2 id="二、基础" tabindex="-1">二、基础 <a class="header-anchor" href="#二、基础" aria-label="Permalink to &quot;二、基础&quot;">​</a></h2><h3 id="_1-常用方法" tabindex="-1">1. 常用方法 <a class="header-anchor" href="#_1-常用方法" aria-label="Permalink to &quot;1. 常用方法&quot;">​</a></h3><h4 id="数据类型转换" tabindex="-1">数据类型转换 <a class="header-anchor" href="#数据类型转换" aria-label="Permalink to &quot;数据类型转换&quot;">​</a></h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>str = String(num)</td><td>数字转字符串</td></tr><tr><td>str = num.toString()</td><td>数字转字符串</td></tr><tr><td>num = Number(str)</td><td>字符串转数字</td></tr><tr><td>num = str.toNumber()</td><td>字符串转数字</td></tr><tr><td>newNum = Number.parseInt(num)</td><td>转换为整数，不会四舍五入</td></tr><tr><td>newNum = Number.parseFloat(num)</td><td>转换为浮点数</td></tr><tr><td>newStr = num.toFixed(n)</td><td>保留几位小数，四舍五入</td></tr></tbody></table><h4 id="字符串方法" tabindex="-1">字符串方法 <a class="header-anchor" href="#字符串方法" aria-label="Permalink to &quot;字符串方法&quot;">​</a></h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>newStr = str.concat(str1,str2,...)</td><td>拼接字符串</td></tr><tr><td>newStr = str.substr(开始下标,截取长度)</td><td>截取字符串</td></tr><tr><td>newStr = str.slice(开始下标,结束下标)</td><td>截取字符串</td></tr><tr><td>newArr = str.split(&#39;&#39;)</td><td>分隔字符串，默认全局分隔，返回数组</td></tr><tr><td>str.indexOf(&#39;..&#39;)</td><td>判断字符串是否包含指定的子字符串，返回符合的下标，查找不到返回-1</td></tr></tbody></table><h4 id="数组遍历" tabindex="-1">数组遍历 <a class="header-anchor" href="#数组遍历" aria-label="Permalink to &quot;数组遍历&quot;">​</a></h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>for(var i in arr){}</td><td>快速遍历,i是数组元素的下标</td></tr><tr><td>arr.forEach((item,index,arr) =&gt; {})</td><td>item 数组元素，index 数组元素下标，arr 数组本身</td></tr><tr><td>newArr = arr.map((item,index,arr) =&gt; {})</td><td>可以操作每一项数组元素，返回一个新数组</td></tr><tr><td>newArr = arr.filter((item,index,arr) =&gt; {})</td><td>过滤符合条件的数组元素，返回一个新数组</td></tr></tbody></table><h4 id="数组方法" tabindex="-1">数组方法 <a class="header-anchor" href="#数组方法" aria-label="Permalink to &quot;数组方法&quot;">​</a></h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>newArr = arr.concat(arr1,arr2,...)</td><td>拼接数组</td></tr><tr><td>arr.slice(开始下标,结束下标)</td><td>截取数组</td></tr><tr><td>arr.includes(&#39;str&#39;)</td><td>判断数组是否包含指定的子字符串，返回 true or false</td></tr><tr><td>arr.indexOf(&#39;..&#39;)</td><td>判断数组是否包含指定的子字符串，返回符合的下标，查找不到返回-1</td></tr><tr><td>arr.push()</td><td>尾部新增元素</td></tr><tr><td>arr.unshift()</td><td>头部新增元素</td></tr><tr><td>arr.pop()</td><td>尾部删除元素</td></tr><tr><td>arr.shift()</td><td>头部删除元素</td></tr><tr><td>newStr = arr.join(&#39;&#39;)</td><td>分隔数组，默认全局分隔，返回字符串</td></tr><tr><td>newArr = arr.splice(开始下标,删除数,新增1,新增2...)</td><td></td></tr><tr><td>Array.isArray(arr)</td><td>判断是否为数组类型，返回 true or false</td></tr></tbody></table><h4 id="math对象方法" tabindex="-1">Math对象方法 <a class="header-anchor" href="#math对象方法" aria-label="Permalink to &quot;Math对象方法&quot;">​</a></h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>Math.ceil(num)</td><td>向上取整</td></tr><tr><td>Math.floor(num)</td><td>向下取整</td></tr><tr><td>Math.round(num)</td><td>四舍五入取整</td></tr><tr><td>Math.abs(num)</td><td>取绝对值</td></tr></tbody></table><h4 id="date对象方法" tabindex="-1">Date对象方法 <a class="header-anchor" href="#date对象方法" aria-label="Permalink to &quot;Date对象方法&quot;">​</a></h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>new Date()</td><td>获取当前时间</td></tr><tr><td>Date.now()</td><td>获取当前时间</td></tr></tbody></table><h4 id="es6方法拓展" tabindex="-1">ES6方法拓展 <a class="header-anchor" href="#es6方法拓展" aria-label="Permalink to &quot;ES6方法拓展&quot;">​</a></h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>空值合并操作符（??）</td><td>逻辑操作符,当左侧值为 null 或者 undefined 时返回其右侧值,否则返回左侧值;</td></tr><tr><td>Object.assign(target, ...sources)</td><td>合并对象</td></tr><tr><td>array.at(-1)</td><td>数组的负索引访问器</td></tr></tbody></table>',23),h=[i];function o(n,l,c,s,b,u){return r(),a("div",null,h)}const S=t(e,[["render",o]]);export{m as __pageData,S as default};
