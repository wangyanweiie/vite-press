import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.27045dd1.js";const p="/vitePress/assets/event-loop3.025b9708.jpeg",o="/vitePress/assets/event-loop2.422c6f86.png",e="/vitePress/assets/event-loop.874b3543.png",c="/vitePress/assets/nodejs_event-loop.cb48a5bd.png",C=JSON.parse('{"title":"JavaScript中的Event Loop(事件循环)那些事","description":"","frontmatter":{},"headers":[],"relativePath":"note/share/事件循环.md","filePath":"note/share/事件循环.md"}'),t={name:"note/share/事件循环.md"},r=l('<h1 id="javascript中的event-loop-事件循环-那些事" tabindex="-1">JavaScript中的Event Loop(事件循环)那些事 <a class="header-anchor" href="#javascript中的event-loop-事件循环-那些事" aria-label="Permalink to &quot;JavaScript中的Event Loop(事件循环)那些事&quot;">​</a></h1><ol><li>JavaScript是单线程、非阻塞的</li><li>浏览器的事件循环 <ul><li>执行栈 和 任务队列</li><li>宏任务 和 微任务</li></ul></li><li>Node.js 下的事件循环 <ul><li>和浏览器环境有何不同</li><li>事件循环模型</li><li>宏任务和微任务</li></ul></li></ol><h2 id="_1-javascript是单线程、非阻塞的" tabindex="-1">1.JavaScript是单线程、非阻塞的 <a class="header-anchor" href="#_1-javascript是单线程、非阻塞的" aria-label="Permalink to &quot;1.JavaScript是单线程、非阻塞的&quot;">​</a></h2><p>单线程：</p><p>JavaScript的主要用途是与用户进行交互，以及操作DOM。如果它是多线程的运行机制，那么就会出现许多复杂的问题需要处理，比如有两个线程同时操作DOM，一个线程删除当前DOM节点，另一个线程要操作当前DOM节点，那么到底应该以哪个线程的操作为基准？所以，为了避免这个问题，JS是单线程的。即使H5提出了web worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，并且不能够操作DOM，所以，这个新标准并没有改变JavaScript单线程的本质。</p><p>非阻塞：</p><p>通过Event Loop实现。</p><h2 id="_2-浏览器的事件循环" tabindex="-1">2.浏览器的事件循环 <a class="header-anchor" href="#_2-浏览器的事件循环" aria-label="Permalink to &quot;2.浏览器的事件循环&quot;">​</a></h2><h3 id="执行栈和任务队列" tabindex="-1">执行栈和任务队列 <a class="header-anchor" href="#执行栈和任务队列" aria-label="Permalink to &quot;执行栈和任务队列&quot;">​</a></h3><p>下图就是主线程和任务队列的示意图：</p><p><img src="'+p+`" alt="event-loop3"></p><p><strong>执行栈</strong>: 同步代码的执行，按照顺序添加到执行栈中</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">b</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">b</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">a</span><span style="color:#24292E;">();</span></span></code></pre></div><ol><li>执行函数 <code>a()</code>先入栈</li><li><code>a()</code>中先执行函数 <code>b()</code> 函数<code>b()</code> 入栈</li><li>执行函数<code>b()</code>, <code>console.log(&#39;b&#39;)</code> 入栈</li><li>输出 <code>b</code>， <code>console.log(&#39;b&#39;)</code>出栈</li><li>函数<code>b()</code> 执行完成，出栈</li><li><code>console.log(&#39;a&#39;)</code> 入栈，执行，输出 <code>a</code>, 出栈</li><li>函数<code>a()</code> 执行完成，出栈</li></ol><p><strong>任务队列</strong>: 异步代码的执行，遇到异步事件不会等待它返回结果，而是将这个事件挂起，继续执行执行栈中的其他任务。当异步事件返回结果，将它放到任务队列中，被放入任务队列不会立刻执行起回调，而是等待当前执行栈中所有任务都执行完毕，当主线程空闲下来，就会去查找任务队列中是否有任务，如果有，则取出排在第一位的事件，并把这个事件对应的回调放到执行栈中，然后执行其中的同步代码。</p><p>在上面代码的基础上添加异步事件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">b</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">b</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">a</span><span style="color:#24292E;">();</span></span></code></pre></div><p>此时的执行过程如下：</p><ol><li>执行函数<code>a()</code>先入栈</li><li><code>a()</code>中先执行函数 <code>b()</code> 函数<code>b()</code> 入栈</li><li>执行函数<code>b()</code>, <code>console.log(&#39;b&#39;)</code> 入栈</li><li>输出 <code>b</code>， <code>console.log(&#39;b&#39;)</code>出栈</li><li>遇到<code>setTimeout()</code>, 它是异步任务，放入任务队列</li><li>函数<code>b()</code> 执行完成，出栈</li><li><code>console.log(&#39;a&#39;)</code> 入栈，执行，输出 <code>a</code>, 出栈</li><li>函数<code>a()</code> 执行完成，出栈</li><li>当前执行栈中所有任务都执行完毕，主线程进入空闲状态，然后查找任务队列中是否有任务</li><li>取出任务队列排在第一位的事件<code>setTimeout()</code>并放入执行栈</li><li>2s后<code>console.log(&#39;c&#39;)</code> 入栈，执行，输出 <code>c</code>, 出栈</li><li><code>setTimeout()</code>执行完毕，出栈</li></ol><p>大致的图解如下：</p><p><img src="`+o+'" alt="event-loop2"></p><h3 id="宏任务-和-微任务" tabindex="-1">宏任务 和 微任务 <a class="header-anchor" href="#宏任务-和-微任务" aria-label="Permalink to &quot;宏任务 和 微任务&quot;">​</a></h3><p>页面渲染事件、各种IO的完成事件等等随时被添加到任务队列中，一直会保持先进先出的原则执行，我们不能准确的控制这些事件被添加到任务队列的位置。但是这个时候突然有高优先级的任务需要尽快执行，那么就只有一种任务类型就不合适了，所以出现了 <strong>微任务队列</strong> 和 <strong>宏任务队列</strong>。</p><p>宏任务：</p><ul><li>script(整体代码)</li><li>setTimeout()</li><li>setInterval()</li><li>I/O</li><li>UI交互事件</li><li>postMessage</li></ul><p>微任务</p><ul><li>new Promise().then(回调)</li><li>MutationObserver(HTML5新特性)</li></ul><h3 id="运行机制" tabindex="-1">运行机制 <a class="header-anchor" href="#运行机制" aria-label="Permalink to &quot;运行机制&quot;">​</a></h3><p>异步任务的返回结果会被放到一个任务队列中，根据异步任务的类型，实际上会被放到对应的 <strong>宏任务队列</strong> 和 <strong>微任务队列</strong> 中去。</p><p>在当前执行栈为空时，主线程会先查看微任务队列是否有任务存在。</p><ul><li>存在，取出微任务队列中最前面的任务对应的回调，并放到当前执行栈执行相关同步任务，直到微任务队列为空，然后去宏任务队列中依次取出最前面的任务放入当前执行栈并执行对应宏任务的回调。</li><li>不存在，去宏任务队列最前面的任务放入当前执行栈并执行对应宏任务的回调。</li></ul><p>当前执行栈执行完毕后会立即处理微任务队列中的事件，然后再去宏任务队列中国取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行。</p><p>每进行一次事件循环，大致步骤如下：</p><ul><li>执行一个宏任务(栈中没有就从任务队列中获取)</li><li>执行宏任务所在的执行栈</li><li>执行过程中如果遇到微任务，就将它添加到微任务队列中</li><li>宏任务执行完毕，立即执行微任务队列中的所有微任务(依次执行)</li><li>微任务执行完毕，立即执行宏任务队列中的所有宏任务(依次执行)</li><li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li><li>渲染完毕后，JS线程继续接管，开始继续执行下一个宏任务(从任务队列中获取)</li></ul><p>事件循环就如下图所示：</p><p><img src="'+e+`" alt="event-loop"></p><h3 id="扩展-promise、async和await的执行顺序" tabindex="-1">扩展: promise、async和await的执行顺序 <a class="header-anchor" href="#扩展-promise、async和await的执行顺序" aria-label="Permalink to &quot;扩展: promise、async和await的执行顺序&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async1</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;async1 start&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async2</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res);</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;async1 end&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async2</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;async2 start&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// return new Promise((resolve) =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//   resolve(&#39;async2 end&#39;)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;async2 end&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;script start&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;setTimeout&#39;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">},</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)  </span></span>
<span class="line"><span style="color:#B392F0;">async1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;promise1&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;promise2&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;script end&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">async1</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;async1 start&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">async2</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res);</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;async1 end&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">async2</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;async2 start&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// return new Promise((resolve) =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//   resolve(&#39;async2 end&#39;)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;async2 end&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;script start&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;setTimeout&#39;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">},</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)  </span></span>
<span class="line"><span style="color:#6F42C1;">async1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;promise1&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;promise2&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;script end&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>结果1:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">script start</span></span>
<span class="line"><span style="color:#E1E4E8;">async</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> start</span></span>
<span class="line"><span style="color:#E1E4E8;">async</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> start</span></span>
<span class="line"><span style="color:#E1E4E8;">promise</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">script end</span></span>
<span class="line"><span style="color:#E1E4E8;">async</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> end</span></span>
<span class="line"><span style="color:#E1E4E8;">async</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> end</span></span>
<span class="line"><span style="color:#E1E4E8;">promise</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">setTimeout</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">script start</span></span>
<span class="line"><span style="color:#24292E;">async</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> start</span></span>
<span class="line"><span style="color:#24292E;">async</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> start</span></span>
<span class="line"><span style="color:#24292E;">promise</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">script end</span></span>
<span class="line"><span style="color:#24292E;">async</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> end</span></span>
<span class="line"><span style="color:#24292E;">async</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> end</span></span>
<span class="line"><span style="color:#24292E;">promise</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">setTimeout</span></span></code></pre></div><p>结果2:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">script start</span></span>
<span class="line"><span style="color:#E1E4E8;">async</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> start</span></span>
<span class="line"><span style="color:#E1E4E8;">async</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> start</span></span>
<span class="line"><span style="color:#E1E4E8;">async</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> end</span></span>
<span class="line"><span style="color:#E1E4E8;">async</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> end</span></span>
<span class="line"><span style="color:#E1E4E8;">promise</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">script end</span></span>
<span class="line"><span style="color:#E1E4E8;">promise</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">setTimeout</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">script start</span></span>
<span class="line"><span style="color:#24292E;">async</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> start</span></span>
<span class="line"><span style="color:#24292E;">async</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> start</span></span>
<span class="line"><span style="color:#24292E;">async</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> end</span></span>
<span class="line"><span style="color:#24292E;">async</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> end</span></span>
<span class="line"><span style="color:#24292E;">promise</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">script end</span></span>
<span class="line"><span style="color:#24292E;">promise</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">setTimeout</span></span></code></pre></div><p>一般情况下，我们（粗浅地）知道await之后的语句会等await表达式中的函数执行完得到结果后，才会继续执行。</p><p><strong>MDN</strong>上描述的await：</p><blockquote><p>async 函数中可能会有 await 表达式，这会使 async 函数暂停执行，等待表达式中的 Promise 解析完成后继续执行 async 函数并返回解决结果。</p></blockquote><p>再看阮一峰老师的解释应该更容易理解：</p><blockquote><p>async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。</p></blockquote><p>MDN描述的暂停执行，实际上是**让出了线程（跳出async函数体）**然后继续执行后面的脚本的。这样一来就可以更直观的明白了。</p><p>也就是说，使用 async 定义的函数，当它被调用时，它返回的其实是一个 Promise 对象。（当这个 async 函数返回一个值时，Promise 的 resolve 方法会负责传递这个值；当 async 函数抛出异常时，Promise 的 reject 方法也会传递这个异常值。）<strong>await是一个让出线程的标志</strong>。await后面的函数会先执行一遍，然后就会跳出整个async函数来执行后面js栈的代码，等本轮事件循环执行完了之后又会跳回到async函数中等待await后面表达式的返回值，如果返回值为非promise则继续执行async函数后面的代码，否则将返回的promise放入promise队列。</p><h2 id="_3-node-js下的事件循环" tabindex="-1">3.node.js下的事件循环 <a class="header-anchor" href="#_3-node-js下的事件循环" aria-label="Permalink to &quot;3.node.js下的事件循环&quot;">​</a></h2><h3 id="和浏览器环境有何不同" tabindex="-1">和浏览器环境有何不同 <a class="header-anchor" href="#和浏览器环境有何不同" aria-label="Permalink to &quot;和浏览器环境有何不同&quot;">​</a></h3><p>表现出的状态与浏览器大致相同。不同的是 node 中有一套自己的模型。node 中事件循环的实现依赖 libuv 引擎。Node的事件循环存在几个阶段。</p><p><img src="`+c+`" alt="nodejs_event-loop"></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">（</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">）V</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">引擎解析JavaScript脚本。</span></span>
<span class="line"><span style="color:#E1E4E8;">（</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">）解析后的代码，调用Node API。</span></span>
<span class="line"><span style="color:#E1E4E8;">（</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">）libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">引擎。</span></span>
<span class="line"><span style="color:#E1E4E8;">（</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">）V</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">引擎再将结果返回给用户。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">（</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">）V</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">引擎解析JavaScript脚本。</span></span>
<span class="line"><span style="color:#24292E;">（</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">）解析后的代码，调用Node API。</span></span>
<span class="line"><span style="color:#24292E;">（</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">）libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">引擎。</span></span>
<span class="line"><span style="color:#24292E;">（</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">）V</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">引擎再将结果返回给用户。</span></span></code></pre></div><p>如果是node10及其之前版本，microtask会在事件循环的各个阶段之间执行，也就是一个阶段执行完毕，就会去执行 microtask队列中的任务。</p><p>node版本更新到11之后，Event Loop运行原理发生了变化，一旦执行一个阶段里的一个宏任务(setTimeout,setInterval和setImmediate)就立刻执行微任务队列，跟浏览器趋于一致。</p><h3 id="事件循环模型" tabindex="-1">事件循环模型 <a class="header-anchor" href="#事件循环模型" aria-label="Permalink to &quot;事件循环模型&quot;">​</a></h3><p>这个模型是node官网上的一篇文章中给出的</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">┌───────────────────────┐</span></span>
<span class="line"><span style="color:#E1E4E8;">┌─</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">│        timers         │</span></span>
<span class="line"><span style="color:#E1E4E8;">│  └──────────┬────────────┘</span></span>
<span class="line"><span style="color:#E1E4E8;">│  ┌──────────┴────────────┐</span></span>
<span class="line"><span style="color:#E1E4E8;">│  │ </span><span style="color:#79B8FF;">I</span><span style="color:#F97583;">/</span><span style="color:#B392F0;">O</span><span style="color:#E1E4E8;">(pending) callbacks│</span></span>
<span class="line"><span style="color:#E1E4E8;">│  └──────────┬────────────┘</span></span>
<span class="line"><span style="color:#E1E4E8;">│  ┌──────────┴────────────┐</span></span>
<span class="line"><span style="color:#E1E4E8;">│  │     idle, prepare     │</span></span>
<span class="line"><span style="color:#E1E4E8;">│  └──────────┬────────────┘      ┌───────────────┐</span></span>
<span class="line"><span style="color:#E1E4E8;">│  ┌──────────┴────────────┐      │   </span><span style="color:#B392F0;">incoming</span><span style="color:#E1E4E8;">:   │</span></span>
<span class="line"><span style="color:#E1E4E8;">│  │         poll          │</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">──connections───     │</span></span>
<span class="line"><span style="color:#E1E4E8;">│  └──────────┬────────────┘      │   data, etc.  │</span></span>
<span class="line"><span style="color:#E1E4E8;">│  ┌──────────┴────────────┐      └───────────────┘</span></span>
<span class="line"><span style="color:#E1E4E8;">│  │        check          │</span></span>
<span class="line"><span style="color:#E1E4E8;">│  └──────────┬────────────┘</span></span>
<span class="line"><span style="color:#E1E4E8;">│  ┌──────────┴────────────┐</span></span>
<span class="line"><span style="color:#E1E4E8;">└──┤    close callbacks    │</span></span>
<span class="line"><span style="color:#E1E4E8;">   └───────────────────────┘</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">┌───────────────────────┐</span></span>
<span class="line"><span style="color:#24292E;">┌─</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">│        timers         │</span></span>
<span class="line"><span style="color:#24292E;">│  └──────────┬────────────┘</span></span>
<span class="line"><span style="color:#24292E;">│  ┌──────────┴────────────┐</span></span>
<span class="line"><span style="color:#24292E;">│  │ </span><span style="color:#005CC5;">I</span><span style="color:#D73A49;">/</span><span style="color:#6F42C1;">O</span><span style="color:#24292E;">(pending) callbacks│</span></span>
<span class="line"><span style="color:#24292E;">│  └──────────┬────────────┘</span></span>
<span class="line"><span style="color:#24292E;">│  ┌──────────┴────────────┐</span></span>
<span class="line"><span style="color:#24292E;">│  │     idle, prepare     │</span></span>
<span class="line"><span style="color:#24292E;">│  └──────────┬────────────┘      ┌───────────────┐</span></span>
<span class="line"><span style="color:#24292E;">│  ┌──────────┴────────────┐      │   </span><span style="color:#6F42C1;">incoming</span><span style="color:#24292E;">:   │</span></span>
<span class="line"><span style="color:#24292E;">│  │         poll          │</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">──connections───     │</span></span>
<span class="line"><span style="color:#24292E;">│  └──────────┬────────────┘      │   data, etc.  │</span></span>
<span class="line"><span style="color:#24292E;">│  ┌──────────┴────────────┐      └───────────────┘</span></span>
<span class="line"><span style="color:#24292E;">│  │        check          │</span></span>
<span class="line"><span style="color:#24292E;">│  └──────────┬────────────┘</span></span>
<span class="line"><span style="color:#24292E;">│  ┌──────────┴────────────┐</span></span>
<span class="line"><span style="color:#24292E;">└──┤    close callbacks    │</span></span>
<span class="line"><span style="color:#24292E;">   └───────────────────────┘</span></span></code></pre></div><h3 id="事件循环各阶段" tabindex="-1">事件循环各阶段 <a class="header-anchor" href="#事件循环各阶段" aria-label="Permalink to &quot;事件循环各阶段&quot;">​</a></h3><p>node中事件循环的顺序</p><p>外部输入数据 --&gt; 轮询阶段（poll） --&gt; 检查阶段(check) --&gt; 关闭事件回调阶段(close callback) --&gt; 定时器检查阶段(timer) --&gt; I/O 事件回调阶段(I/O callbacks) --&gt; 闲置阶段(idle, prepare) --&gt; 轮询阶段...</p><p>这些阶段大致的功能如下：</p><ul><li>定时器检测阶段(timers): 这个阶段执行定时器队列中的回调如 setTimeout() 和 setInterval()。</li><li>I/O事件回调阶段(I/O callbacks): 这个阶段执行几乎所有的回调。但是不包括close事件，定时器和setImmediate()的回调。</li><li>闲置阶段(idle, prepare): 这个阶段仅在内部使用，可以不必理会</li><li>轮询阶段(poll): 等待新的I/O事件，node在一些特殊情况下会阻塞在这里。</li><li>检查阶段(check): setImmediate()的回调会在这个阶段执行。</li><li>关闭事件回调阶段(close callbacks): 例如socket.on(&#39;close&#39;, ...)这种close事件的回调</li></ul><p>poll： 这个阶段是轮询时间，用于等待还未返回的 I/O 事件，比如服务器的回应、用户移动鼠标等等。 这个阶段的时间会比较长。如果没有其他异步任务要处理（比如到期的定时器），会一直停留在这个阶段，等待 I/O 请求返回结果。 check: 该阶段执行setImmediate()的回调函数。</p><p>close: 该阶段执行关闭请求的回调函数，比如socket.on(&#39;close&#39;, ...)。</p><p>timer阶段: 这个是定时器阶段，处理setTimeout()和setInterval()的回调函数。进入这个阶段后，主线程会检查一下当前时间，是否满足定时器的条件。如果满足就执行回调函数，否则就离开这个阶段。</p><p>I/O callback阶段： 除了以下的回调函数，其他都在这个阶段执行：</p><ul><li>setTimeout()和setInterval()的回调函数</li><li>setImmediate()的回调函数</li><li>用于关闭请求的回调函数，比如socket.on(&#39;close&#39;, ...)</li></ul><h3 id="宏任务和微任务" tabindex="-1">宏任务和微任务 <a class="header-anchor" href="#宏任务和微任务" aria-label="Permalink to &quot;宏任务和微任务&quot;">​</a></h3><p>宏任务：</p><ul><li>setImmediate</li><li>setTimeout</li><li>setInterval</li><li>script（整体代码)</li><li>I/O 操作等。</li></ul><p>微任务：</p><ul><li>process.nextTick</li><li>new Promise().then(回调)</li></ul><h3 id="process-nexttick-settimeout-setimmediate的使用场景和区别" tabindex="-1">process.nextTick， setTimeout, setImmediate的使用场景和区别 <a class="header-anchor" href="#process-nexttick-settimeout-setimmediate的使用场景和区别" aria-label="Permalink to &quot;process.nextTick， setTimeout, setImmediate的使用场景和区别&quot;">​</a></h3><p>process.nextTick process.nextTick 是一个独立于 eventLoop 的任务队列。 在每一个 eventLoop 阶段完成后会去检查 nextTick 队列，如果里面有任务，会让这部分任务优先于微任务执行。是所有异步任务中最快执行的。</p><p>setTimeout： setTimeout()方法是定义一个回调，并且希望这个回调在我们所指定的时间间隔后第一时间去执行。</p><p>setImmediate： setImmediate()方法从意义上将是立刻执行的意思，但是实际上它却是在一个固定的阶段才会执行回调，即poll阶段之后，但是在执行的时候需要首先清空微任务队列。</p>`,78),E=[r];function i(y,d,F,u,h,g){return n(),a("div",null,E)}const v=s(t,[["render",i]]);export{C as __pageData,v as default};
