import{_ as t,o as d,c as r,Q as e}from"./chunks/framework.27045dd1.js";const b=JSON.parse('{"title":"GIT","description":"","frontmatter":{},"headers":[],"relativePath":"note/frame/GIT.md","filePath":"note/frame/GIT.md"}'),a={name:"note/frame/GIT.md"},o=e('<h1 id="git" tabindex="-1">GIT <a class="header-anchor" href="#git" aria-label="Permalink to &quot;GIT&quot;">​</a></h1><h2 id="一、配置" tabindex="-1">一、配置 <a class="header-anchor" href="#一、配置" aria-label="Permalink to &quot;一、配置&quot;">​</a></h2><h3 id="_1-全局配置" tabindex="-1">1. 全局配置 <a class="header-anchor" href="#_1-全局配置" aria-label="Permalink to &quot;1. 全局配置&quot;">​</a></h3><ul><li>git config --global user.name &quot;wyw&quot;</li><li>git config --global user.email &quot;<a href="mailto:740484522@qq.com" target="_blank" rel="noreferrer">740484522@qq.com</a>&quot;</li></ul><h3 id="_2-创建仓库" tabindex="-1">2. 创建仓库 <a class="header-anchor" href="#_2-创建仓库" aria-label="Permalink to &quot;2. 创建仓库&quot;">​</a></h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git init</td><td>初始化</td></tr><tr><td>touch README.md</td><td>创建 README 文件</td></tr><tr><td>git add README.md</td><td>暂存 README 文件</td></tr><tr><td>git commit -m &quot;first commit&quot;</td><td>提交到本地仓库</td></tr><tr><td>git remote add origin url</td><td>连接到远程仓库地址</td></tr><tr><td>git push -u origin master</td><td>推送到远程仓库</td></tr></tbody></table><h3 id="_3-已有仓库" tabindex="-1">3. 已有仓库? <a class="header-anchor" href="#_3-已有仓库" aria-label="Permalink to &quot;3. 已有仓库?&quot;">​</a></h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git clone <code>url</code></td><td>克隆远程仓库到本地</td></tr><tr><td>git clone <code>url</code> myLibName</td><td>克隆远程仓库到本地并自定义本地仓库的名字</td></tr><tr><td>git remote -v</td><td>查看连接的远程仓库列表</td></tr><tr><td>git remote set-url origin <code>url</code></td><td>改变连接的远程仓库地址</td></tr><tr><td>git remot</td><td></td></tr><tr><td>git remote add origin <code>url</code></td><td></td></tr></tbody></table><h2 id="二、终端命令" tabindex="-1">二、终端命令 <a class="header-anchor" href="#二、终端命令" aria-label="Permalink to &quot;二、终端命令&quot;">​</a></h2><h3 id="_1-保存提交代码" tabindex="-1">1. 保存提交代码 <a class="header-anchor" href="#_1-保存提交代码" aria-label="Permalink to &quot;1. 保存提交代码&quot;">​</a></h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git stash save &#39;<code>message</code>&#39;</td><td>能够将所有未提交的修改（工作区和暂存区）保存至堆栈中</td></tr><tr><td>git stash list</td><td>查看stash列表</td></tr><tr><td>git stash pop</td><td>应用最近一次的stash并删除该记录</td></tr><tr><td>git stash clear</td><td>清除堆栈中的所有内容</td></tr><tr><td>git pull</td><td>拉取远程分支与本地合并</td></tr><tr><td>git status</td><td>查看当前项目文件的状态信息</td></tr><tr><td>git add .</td><td>暂存已修改的文件</td></tr><tr><td>git commit -m &#39;message&#39;</td><td>提交更新保存到本地</td></tr><tr><td>git commit -m &#39;message&#39; --no-verify</td><td>跳过校验规则提交更新保存到本地</td></tr><tr><td>git reset --soft HEAD^</td><td>恢复最近一次 commit</td></tr><tr><td>git reset <code>version</code></td><td>版本回退</td></tr><tr><td>git reset <code>version</code> --hard</td><td>强制版本回退</td></tr><tr><td>git push</td><td>直接推送到远程仓库</td></tr></tbody></table><h3 id="_2-husky-钩子" tabindex="-1">2. Husky 钩子 <a class="header-anchor" href="#_2-husky-钩子" aria-label="Permalink to &quot;2. Husky 钩子&quot;">​</a></h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git commit -m &#39;feat: <code>message</code>&#39;</td><td>新功能、新特性</td></tr><tr><td>git commit -m &#39;fix: &#39;</td><td>修改 Bug</td></tr><tr><td>git commit -m &#39;docs: &#39;</td><td>文档修改</td></tr><tr><td>git commit -m &#39;style: &#39;</td><td>代码格式修改，注意不是css修改（例如分号修改）</td></tr><tr><td>git commit -m &#39;test: &#39;</td><td>测试用例新增、修改</td></tr><tr><td>git commit -m &#39;build: &#39;</td><td>影响项目构建或依赖项修改</td></tr><tr><td>git commit -m &#39;perf: &#39;</td><td>更改代码以提高性能（在不影响代码内部行为的前提下，对程序性能优化）</td></tr><tr><td>git commit -m &#39;refactor: &#39;</td><td>代码重构（重构，在不影响代码内部行为、功能下的代码修改）</td></tr><tr><td>git commit -m &#39;workflow: &#39;</td><td>工作流相关文件修改</td></tr></tbody></table><h3 id="_3-分支" tabindex="-1">3. 分支 <a class="header-anchor" href="#_3-分支" aria-label="Permalink to &quot;3. 分支&quot;">​</a></h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git branch</td><td>查看当前所处分支</td></tr><tr><td>git branch -a</td><td>查看本地与远程仓库的所有分支</td></tr><tr><td>git branch <code>branchname</code></td><td>创建分支</td></tr><tr><td>git checkout <code>branchname</code></td><td>切换所在的分支</td></tr><tr><td>git branch -d <code>branchname</code></td><td>删除已有分支</td></tr><tr><td>git merge <code>branchname</code></td><td>在本地将子分支合并到主分支</td></tr><tr><td>git push -u origin <code>branchname</code></td><td>将子分支推送到码云</td></tr></tbody></table><h3 id="_4-标签" tabindex="-1">4. 标签 <a class="header-anchor" href="#_4-标签" aria-label="Permalink to &quot;4. 标签&quot;">​</a></h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git tag</td><td>查看本地创建的所有标签</td></tr><tr><td>git tag <code>tagname</code></td><td>创建标签</td></tr><tr><td>git checkout <code>tagname</code></td><td>切换所在的标签</td></tr><tr><td>git tag -d <code>tagname</code></td><td>删除已有标签</td></tr><tr><td>git push origin &lt;<code>tagname</code>&gt;</td><td>将本地标签推送到码云</td></tr><tr><td>git push --tags</td><td>将本地所有不在远程仓库的标签都推送到码云</td></tr></tbody></table>',17),i=[o];function h(c,l,m,s,n,g){return d(),r("div",null,i)}const _=t(a,[["render",h]]);export{b as __pageData,_ as default};
